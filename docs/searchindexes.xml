<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<search>
  
  <entry>
    <title>一个不带插件的flask应用</title>
    <url>https://chaleaoch.com/post/%E4%B8%80%E4%B8%AA%E4%B8%8D%E5%B8%A6%E6%8F%92%E4%BB%B6%E7%9A%84flask%E5%BA%94%E7%94%A8/</url>
    <categories><category>default</category>
    </categories>
    <tags>
      <tag>flask</tag>
      <tag>python</tag>
    </tags>
    <content type="html"><![CDATA[起因 事情的起因是这样的, 曾经维护过一个别人做的 flask 项目,引用了大量的插件, 在维护过程中需要调查插件的源码来解决问题, 发现有的插件功能很单一,但是却写的很复杂(因为开源插件要考虑各种实际使用场景). 有时间精力还不如自己写一个. 恰好得到一个从零开始的项目. 决定尝试做一个零插件的 flask 项目. 目前来看效果还不错.
需要说明的是: 这里的零插件是指零 flask 插件,不是不用任何 python 插件.
项目构成 一个很简单的 dashboard, 主要用到如下组件
1 2 3 4 5 6 7 8 9 10 11 12 13 14 python = &#34;~3.10&#34; Flask = &#34;~2.1.1&#34; python-dotenv = &#34;~0.20.0&#34; pydantic = &#34;~1.9.0&#34; requests = &#34;~2.27.1&#34; peewee = &#34;~3.14.10&#34; arrow = &#34;~1.2.2&#34; psycopg2 = &#34;~2.9.3&#34; wtf-peewee = &#34;~3.0.4&#34; APScheduler = &#34;~3.9.1&#34; redis = &#34;~4.3.3&#34; SQLAlchemy = &#34;~1.4.37&#34; gunicorn = &#34;~20.1.0&#34; Cython = &#34;^0.29.30&#34; 可能用到的 flask 插件是: flask-redis, flask-sqlalchemy, flask-peewee, flask-pydantic
flask-redis 先说 flask-redis src/extentions.py
1 2 3 4 5 6 7 8 from redis import Redis class FlaskRedis: def __init__(self) -&gt; None: self.client = None def init(self, app): self.client = Redis.from_url(app.config[&#34;REDIS_URL&#34;]) redis_client = FlaskRedis() 只需要在需要的地方
1 2 3 4 from extensions import redis_client def get_redis_data(key) -&gt; list[Any] | dict[Any, Any] | None: ret = redis_client.client.get(f&#34;{key}&#34;) 是不是超级简单,完全满足项目需要. 也不需要记忆开源插件的配置.
flask apscheduler 再譬如 scheduler src/extentioons.py
1 2 3 4 5 6 7 8 9 10 11 12 from apscheduler.schedulers.blocking import BlockingScheduler class FlaskScheduler: def init(self, app): scheduler = BlockingScheduler() scheduler.configure(**app.config[&#34;SCHEDULER_OPTIONS&#34;]) jobs = app.config.get(&#34;SCHEDULER_JOBS&#34;, []) for job in jobs: scheduler.add_job(**job) self.scheduler = scheduler scheduler = FlaskScheduler() 当然,这里需要在 create_app 中 init 一下
1 2 3 4 5 def create_app(test_config: dict[str, Any] = None) -&gt; Flask: ... redis_client.init(app) scheduler.init(app) ... scheduler 的使用需要通过 flask 中的 click 配合实现:
/src/cli/scheduler.py
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 from flask.cli import with_appcontext from extensions import scheduler from flask.cli import AppGroup scheduler_cli = AppGroup(&#34;scheduler&#34;) @scheduler_cli.command(&#34;start&#34;) @with_appcontext def start(): scheduler.scheduler.start() @scheduler_cli.command(&#34;stop&#34;) @with_appcontext def stop(): scheduler.scheduler.stop() 文章写到这里, 发现这个项目还有一个替换flask-migrate的实现. 但是现在已经是早上 8 点半了. 我要去上班了. 等有时间在下篇文章中介绍.
]]></content>
  </entry>
  
  <entry>
    <title>Hello World</title>
    <url>https://chaleaoch.com/post/hello-world/</url>
    <categories>
    </categories>
    <tags>
    </tags>
    <content type="html"><![CDATA[hello world!
]]></content>
  </entry>
  
  <entry>
    <title>Hello World</title>
    <url>https://chaleaoch.com/posts/hello-world/</url>
    <categories>
    </categories>
    <tags>
    </tags>
    <content type="html"><![CDATA[sdl;fkhasdfhaskldjfhaskldjfhaskldjhfaslkdfjhskldjhdfklajsh
]]></content>
  </entry>
  
  <entry>
    <title>关于 Hugo NexT 组织</title>
    <url>https://chaleaoch.com/about.html</url>
    <categories>
    </categories>
    <tags>
    </tags>
    <content type="html"><![CDATA[Hugo NexT 组织是由众多喜爱 NexT 主题及风格的世界各地友人共同组建而成，为的就是让这个主题继续在 Hugo 引擎中也能得到发扬光大，在此也欢迎你的加入！
我们的愿景 延续 NexT 经典的黑白调搭配，保持简单的易用性及强大的功能。
使用反馈 加入 GitHub Discussions 或 Gitter 在线讨论 🍻 GitHub Issues 提交错误报告 🐛 GitHub Feature 表新功能的想法 ✨ 同时国内用户也可加入 QQ 群交流： 604710815
]]></content>
  </entry>
  
  <entry>
    <title>站点示例</title>
    <url>https://chaleaoch.com/flinks.html</url>
    <categories>
    </categories>
    <tags>
    </tags>
    <content type="html"><![CDATA[如想要交换友情链接，请在评论区留下你的站点信息，格式参考如下：
名称： NexT 主题 说明： 保持简单的易用性和强大的功能。 站标： https://hugo-next.eu.org/imgs/hugo_next_avatar.png 网址： https://hugo-next.eu.org ]]></content>
  </entry>
  
</search>